// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Company       Company[]
  Client        Client[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String   
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  dateAdded DateTime @default(now())
  userId    String
  createdBy User     @relation(fields: [userId], references: [id])
  clients   Client[]
  tasks     Task[]
}

model Client {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  dateAdded DateTime @default(now())
  userId    String
  createdBy User     @relation(fields: [userId], references: [id])
  tasks     Task[]
  meetings  Meeting[]
}

model Task {
  id            String   @id @default(cuid())
  title         String
  dueDate       DateTime?
  dateAdded     DateTime @default(now())
  description   String?
  completedTime DateTime?
  companyId     String?
  company       Company? @relation(fields: [companyId], references: [id])
  clientId      String?
  client        Client?  @relation(fields: [clientId], references: [id])
}

model Meeting {
  id        String   @id @default(cuid())
  title     String
  time      DateTime
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  createdAt DateTime @default(now())
}
